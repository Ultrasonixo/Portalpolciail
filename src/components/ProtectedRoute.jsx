// src/components/ProtectedRoute.jsx - Corrigido

import React, { useEffect } from 'react';
import { Navigate, useLocation, Outlet, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';
import { toast } from 'react-toastify'; // Importado para mensagens de erro

// Aceita requiredType E requiredPermission
function ProtectedRoute({ children, requiredType, requiredPermission }) {
    const { user, token, isLoading } = useAuth();
    const location = useLocation();
    const navigate = useNavigate();

    // 游눤 [CORRE칂츾O APLICADA] Define URLs de redirecionamento
    // Se a rota exige 'policial' OU exige qualquer permiss칚o (que s칩 policial tem),
    // o redirecionamento deve ser para o login policial.
    const requiresPoliceLogin = requiredType === 'policial' || requiredPermission;
    
    const loginRedirect = requiresPoliceLogin ? '/policia/login' : '/login';
    const permissionDeniedRedirect = '/'; // Para onde redirecionar se n칚o tiver permiss칚o

    useEffect(() => {
        if (!isLoading) {
            // 1. N칚o logado ou sem token
            if (!user || !token) {
                navigate(loginRedirect, { state: { from: location }, replace: true });
                return;
            }
            
            // 2. Logado, mas com tipo errado (Ex: Civil tentando Staff/RH)
            if (user && user.type === 'civil' && requiresPoliceLogin) {
                 toast.error("Acesso negado. Utilize o Login Policial para esta 치rea.");
                 // Desloga o civil antes de redirecionar para o login policial
                 // (Assumindo que useAuth tem logout, mas sem o c칩digo, vamos focar no redirect)
                 // Se o logout n칚o estiver dispon칤vel, o redirecionamento j치 칠 suficiente.
                 navigate(loginRedirect, { replace: true });
                 return;
            }
            
            // 3. Logado, com tipo correto (ou sem tipo exigido), MAS SEM PERMISS츾O (se requiredPermission foi passado)
            if (requiredPermission && !user.permissoes?.[requiredPermission]) {
                 // Verifica se o usu치rio tem a permiss칚o master (is_staff, is_rh) se a permiss칚o espec칤fica n칚o for encontrada.
                 // A l칩gica do back-end j치 injeta is_rh/is_staff/is_dev.
                 const hasGlobalPermission = user.permissoes?.is_staff || user.permissoes?.is_rh || user.permissoes?.is_dev;
                 
                 if (!hasGlobalPermission) {
                     console.warn(`[ProtectedRoute] Permiss칚o '${requiredPermission}' negada para ${user.nome_completo}. Redirecionando...`);
                     navigate(permissionDeniedRedirect, { replace: true }); // Redireciona para home ou p치gina de erro
                     return;
                 }
            }
        }
    }, [isLoading, user, token, requiredType, requiredPermission, location, navigate, loginRedirect, permissionDeniedRedirect, requiresPoliceLogin]);

    // Renderiza칞칚o
    if (isLoading) {
        return <div>Verificando sess칚o...</div>;
    }

    // Se a verifica칞칚o falhou (a nega칞칚o deve ser tratada no useEffect)
    // Se o user existe E ele n칚o tem a permiss칚o global E n칚o tem a permiss칚o requerida, bloqueia.
    const accessBlockedByRender = (requiredPermission && !user?.permissoes?.[requiredPermission] && !user?.permissoes?.is_staff);

    if (!user || accessBlockedByRender) {
        return null; // Espera o useEffect redirecionar
    }

    // Permite renderiza칞칚o
    return children ? children : <Outlet />;
}

export default ProtectedRoute;